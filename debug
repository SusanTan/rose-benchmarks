ROSE 0.11.98.1 (configured Tuesday February  7 14:42:28 2023)
  --- logic assertions:           enabled
  --- full optimization:          disabled
  --- boost library:              1.81.0 (/u/zujunt/rose-workspace/boost-install)
  --- readline library:           unused
  --- library build path:         /u/zujunt/rose-workspace/rose-install
  --- original installation path: /u/zujunt/rose-workspace/rose-install
  --- C/C++ analysis:             enabled
  ---   C/C++ front-end:          edg-5.0
  ---   C back-end:               9.4 (gcc)
  ---   C++ back-end:             9.4 (g++)
  --- Fortran analysis:           disabled
  --- binary analysis:            enabled
  ---   object serialization:     enabled
  ---   ARM AArch32 (A32/T32):    disabled
  ---   ARM AArch64 (A64):        disabled
  ---   MIPS (be and le):         enabled
  ---   Motorola m68k (coldfire): enabled
  ---   PowerPC (be and le):      enabled
  ---   Intel x86 (i386):         enabled
  ---   Intel x86-64 (amd64):     enabled
  ---   concolic testing:         disabled
  ---   capstone library:         unused
  ---   dlib library:             unused
  ---   gcrypt library:           unused
  ---   magic numbers library:    unused
  ---   pqxx library:             unused
  ---   sqilte library:           unused
  ---   yaml-cpp library:         unused
  ---   z3 library:               unused
  --- Ada analysis:               disabled
  --- C# analysis:                disabled
  --- COBOL analysis:             disabled
  --- CUDA analysis:              enabled
  --- Java analysis:              disabled
  --- Jovial analysis:            disabled
  --- Matlab analysis:            disabled
  --- OFP analysis:               disabled
  --- OpenCL analysis:            enabled
  --- PHP analysis:               enabled
  --- Python analysis:            disabled


This ROSE translator provides a means for operating on C, C++, Fortran and Java
source code; as well as on x86, ARM, and PowerPC executable code (plus object files 
and libraries).

Usage: rose [OPTION]... FILENAME...

If a long option shows a mandatory argument, it is mandatory for the equivalent
short option as well, and similarly for optional arguments.

Main operation mode:
     -rose:(o|output) FILENAME
                             file containing final unparsed C++ code
                             (relative or absolute paths are supported)
     -rose:keep_going
                             Similar to GNU Make's --keep-going option.

                             If ROSE encounters an error while processing your
                             input code, ROSE will simply run your backend compiler on
                             your original source code file, as is, without modification.

                             This is useful for compiler tests. For example,
                             when compiling a 100K LOC application, you can
                             try to compile as much as possible, ignoring failures,
                             in order to gauage the overall status of your translator,
                             with respect to that application.

Operation modifiers:
     -rose:output_warnings   compile with warnings mode on
     -rose:C_only, -rose:C   follow C89 standard, disable C++
     -rose:C89_only, -rose:C89
                             follow C89 standard, disable C++
     -rose:C99_only, -rose:C99
                             follow C99 standard, disable C++
     -rose:C11_only, -rose:C11
                             follow C11 standard, disable C++
     -rose:C14_only, -rose:C14
                             follow C14 standard, disable C++
     -rose:Cxx_only, -rose:Cxx
                             follow C++89 standard
     -rose:Cxx11_only, -rose:Cxx11
                             follow C++11 standard
     -rose:Cxx14_only, -rose:Cxx14
                             follow C++14 standard
     -rose:java
                             compile Java code (work in progress)
     -rose:java:cp, -rose:java:classpath, -cp, -classpath
                             Classpath to look for java classes
     -rose:java:sourcepath, -sourcepath
                             Sourcepath to look for java sources
     -rose:java:d, -d
                             Specifies generated classes destination dir
     -rose:java:ds
                             Specifies translated sources destination dir
     -rose:java:source
                             Specifies java sources version (default=1.6)
     -rose:java:target
                             Specifies java classes target version (default=1.6)
     -rose:java:encoding
                             Specifies the character encoding
     -rose:java:ecj:jvm_options
                             Specifies the JVM startup options
     -rose:Python, -rose:python, -rose:py
                             compile Python code
     -rose:OpenMP, -rose:openmp
                             follow OpenMP 3.0 specification for C/C++ and Fortran, perform one of the following actions:
     -rose:OpenMP:parse_only, -rose:openmp:parse_only
                             parse OpenMP directives to OmpAttributes, no further actions (default behavior now)
     -rose:OpenMP:ast_only, -rose:openmp:ast_only
                             on top of -rose:openmp:parse_only, build OpenMP AST nodes from OmpAttributes, no further actions
     -rose:OpenMP:lowering, -rose:openmp:lowering
                             on top of -rose:openmp:ast_only, transform AST with OpenMP nodes into multithreaded code 
                             targeting GCC GOMP runtime library
     -rose:OpenACC, -rose:openacc
                             follow OpenACC 3.0 specification for Fortran, perform one of the following actions:
     -rose:OpenACC:parse_only, -rose:openacc:parse_only
                             parse OpenACC directives to OmpAccAttributes, no further actions (default behavior now)
     -rose:OpenACC:ast_only, -rose:openacc:ast_only
                             on top of -rose:openacc:parse_only, build OpenACC AST nodes from OmpAccAttributes, no further actions
     -rose:UPC_only, -rose:UPC
                             follow Unified Parallel C 1.2 specification
     -rose:UPCxx_only, -rose:UPCxx
                             allows C++ within UPC (follows UPC 1.2 but simpily allows 
                             using C++ as the base language) (not a legitimate language, 
                             since there is no backend compiler to support this).
     -rose:upc_threads n     Enable UPC static threads compilation with n threads
                             n>=1: static threads; dynamic(default) otherwise
     -rose:fortran
                             compile Fortran code, determining version of
                             Fortran from file suffix)
     -rose:CoArrayFortran, -rose:CAF, -rose:caf
                             compile Co-Array Fortran code (extension of Fortran 2003)
     -rose:CAF2.0, -rose:caf2.0
                             compile Co-Array Fortran 2.0 code (Rice CAF extension)
     -rose:Fortran2003, -rose:F2003, -rose:f2003
                             compile Fortran 2003 code
     -rose:Fortran95, -rose:F95, -rose:f95
                             compile Fortran 95 code
     -rose:Fortran90, -rose:F90, -rose:f90
                             compile Fortran 90 code
     -rose:Fortran77, -rose:F77, -rose:f77
                             compile Fortran 77 code
     -rose:Fortran66, -rose:F66, -rose:f66
                             compile Fortran 66 code
     -rose:FortranIV, -rose:FIV, -rose:fIV
                             compile Fortran IV code
     -rose:FortranII, -rose:FII, -rose:fII
                             compile Fortran II code (not implemented yet)
     -rose:FortranI, -rose:FI, -rose:fI
                             compile Fortran I code (not implemented yet)
     -rose:fortran:ofp:jvm_options
                             Specifies the JVM startup options
     -rose:x10
                             compile X10 code (work in progress)
     -rose:strict            strict enforcement of ANSI/ISO standards
     -rose:binary, -rose:binary_only
                             assume input file is for binary analysis (this avoids
                             ambiguity when ROSE might want to assume linking instead)
     -rose:FailSafe, -rose:failsafe
                             Enable experimental processing of resilience directives defined by FAIL-SAFE annotation language specification.
     -rose:projectSpecificDatabaseFile FILE
                             filename where a database of all files used in a project are stored
                             for producing unique trace ids and retrieving the reverse mapping from trace to files     -rose:compilationPerformance
                             Output compilation performance after compilation of input file.
                             Reports internal phases of ROSE compilation (time and memory requirements), output to stdout.
                             See also "-rose:compilationPerformanceFile FILE" for CSV report in a file.
     -rose:compilationPerformanceFile FILE
                             filename where compiler performance for internal
                             phases (in CSV form) is placed for later
                             processing (using script/graphPerformance)
     -rose:exit_after_parser just call the parser (C, C++, and fortran only)
     -rose:skip_syntax_check skip Fortran syntax checking (required for F2003 and Co-Array Fortran code
                             when using gfortran versions greater than 4.1)
     -rose:relax_syntax_check skip Fortran syntax checking (required for some F90 code
                             when using gfortran based syntax checking)
     -rose:skip_translation_from_edg_ast_to_rose_ast
                             skip the translation of the EDG AST into the ROSE AST
                             (an SgProject, SgFile, and empty SgGlobal will be constructed)
     -rose:skip_transformation
                             read input file and skip all transformations
     -rose:skip_unparse      read and process input file but skip generation of
                             final C++ output file
     -rose:skipfinalCompileStep
                             read and process input file, 
                             but skip invoking the backend compiler
     -rose:collectAllCommentsAndDirectives
                             store all comments and CPP directives in header
                             files into the AST
     -rose:unparseHeaderFiles
                             unparse all directly or indirectly modified
                             header files
     -rose:excludeCommentsAndDirectives PATH
                             provide path to exclude when using the
                             collectAllCommentsAndDirectives option
     -rose:excludeCommentsAndDirectivesFrom FILENAME
                             provide filename to file with paths to exclude
                             when using the collectAllCommentsAndDirectives
                             option
     -rose:includeCommentsAndDirectives PATH
                             provide path to include when using the
                             collectAllCommentsAndDirectives option
     -rose:includeCommentsAndDirectivesFrom FILENAME
                             provide filename to file with paths to include
                             when using the collectAllCommentsAndDirectives
                             option
     -rose:skip_commentsAndDirectives
                             ignore all comments and CPP directives (can
                             generate (unparse) invalid code if not used with
                             -rose:unparse_includes)
     -rose:prelink           activate prelink mechanism to force instantiation
                             of templates and assignment to files
     -rose:instantiation XXX control template instantiation
                             XXX is one of (none, used, all, local)
     -rose:read_executable_file_format_only
                             ignore disassemble of instructions (helps debug binary 
                             file format for binaries)
     -rose:skipAstConsistancyTests
                             skip AST consitancy testing (for better performance)
     -rose:no_optimize_flag_for_frontend
                             ignore use of __builtin functions in frontend processing
                             all optimization specified is still done on ROSE generated code

AST I/O:
     -rose:ast:read in1.ast,in2.ast
                             Comma-separated list of input AST files (extension does *not* matter).
                             Evaluated when the frontend finishes (before merge and plugins).
     -rose:ast:write out.ast
                             Output AST file (extension does *not* matter).
                             Evaluated in the backend before any file unparsing or backend compiler calls.
     -rose:ast:merge         Merges ASTs from different source files (always true when -rose:ast:read is used)

AST to GraphViz:
     -rose:ast:graphviz:when off|frontend|backend|both
                             When to generate the graph (off by default).
                             "frontend" refers to after the frontend but before any midend (or plugin) runs.
                                  It shows the AST as it was read.
                             "backend" refers to after all midend (or plugin) have been run.
                                  It shows the AST as it will be unparsed.
     -rose:ast:graphviz:mode tree|graph
                             Whether to generate the basic AST or the complete graph (AST + symbols + types)
                             The graph mode will show *all* nodes: you must use self-contained reproducers
                                 (using -DSKIP_ROSE_BUILTIN_DECLARATIONS -- can be multiple source/header but no system headers).
     -rose:ast:graphviz:out rose-ast-frontend.dot,rose-ast-backend.dot
                             Name of the output file (comma separted files if when=both).
                             Default is rose-ast.dot if when is not both, else it is rose-ast-frontend.dot and rose-ast-backend.dot

AST checking:
     -rose:ast:checker:when off|frontend|backend|both
                             When to check the AST (off by default).
                             "frontend" refers to after the frontend but before any midend (or plugin) runs.
                                  It checks the AST as it was read.
                             "backend" refers to after all midend (or plugin) have been run.
                                  It checks the AST as it will be unparsed.
     -rose:ast:checker:mode ll,ast
                             Comma-separated selection of checkers:
                               * ll: low-level AST checks (pointer validity)
                               * ast: construction rules (such as declarations, symbols, and types graphs)
                             Default is "ll,ast"
     -rose:ast:checker:effect none|summary|report|fail
                             Control the effect of detecting defect:.
                               * none: no visible effect but log/save might still get triggered.
                               * summary|report: display a summary or full log on std::cerr.
                               * fail: display a summary on std::cerr then abort.
     -rose:ast:checker:log filename.log
                             Output log file *iff* any defect is found (no log if missing).
                             Comma separated if when=both.
     -rose:ast:checker:save filename
                             Causes the whole AST and check results to be saved as filename.ast and filename.json.
                             *iff* any defect is found.
                             Comma separated if when=both.

Plugin Mode:
     -rose:plugin_lib <shared_lib_filename>
                             Specify the file path to a shared library built from plugin source files 
                             This option can repeat multiple times to load multiple libraries 
     -rose:plugin_action <act_name>
                             Specify the plugin action to be executed
                             This option can repeat multiple times to execute multiple actions 
                             in the order shown up in command line 
     -rose:plugin_arg_<act_name>  <option>
                             Specify one option to be passed to a plugin named act_name
                             This option can repeat multiple times to provide multiple options to a plugin 

GNU g++ options recognized:
     -ansi                   equivalent to -rose:strict
     -fno-implicit-templates disable output of template instantiations in
                             generated source
     -fno-implicit-inline-templates
                             disable output of inlined template instantiations
                             in generated source
     -S                      gnu option trivial
     -u (-undefined)         gnu option trivial
     -version-info <name>    gnu option trivial (option not passed on to linker yet, 
                             incomplete implementation)
     -MM <filename>          gnu Makefile dependence generation (option not passed 
                             on to compiler yet, incomplete implementation)

Informative output:
     -rose:help, --help, -help, --h
                             print this help, then exit
     -rose:version, --version, --V
                             print ROSE program version number, then exit
     -rose:markGeneratedFiles
                             add "#define ROSE_GENERATED_CODE" to top of all
                               generated code
     -rose:verbose [LEVEL]   verbosely list internal processing (default=0)
                               Higher values generate more output (can be
                               applied to individual files and to the project
                               separately).
     -rose:log WHAT
                             Control diagnostic output. See '-rose:log help' for
                             more information.
     -rose:assert HOW
                             Determines how a failed assertion is handled. The value
                             for HOW should be 'abort', 'exit' with non-zero status, or
                             'throw' a Rose::Diagnostics::FailedAssertion exception. Only
                             assertions that use the Sawyer mechanism are affected.
     -rose:output_parser_actions
                             call parser with --dump option (fortran only)
     -rose:embedColorCodesInGeneratedCode LEVEL
                             embed color codes into generated output for
                               visualization of highlighted text using tview
                               tool for constructs specified by LEVEL
                             LEVEL is one of:
                               1: missing position information
                               2: compiler-generated code
                               3: other code
     -rose:generateSourcePositionCodes LEVEL
                             generate separate file of source position
                               information for highlighting original source
                               file using tview tool for constructs specified
                               by LEVEL
                             LEVEL is one of:
                               1: statements, preprocessor directives and
                                  comments
                               2: expressions

Control EDG frontend processing:
     -edg:new_frontend       force use of external EDG front end (disables use
                               of rest of ROSE/SAGE)
     -edg:KCC_frontend       for use of KCC (with -c option) as new frontend
                               (must be specified with -edg:new_frontend)
     -edg:XXX                pass  -XXX to EDG front-end
    --edg:XXX                pass --XXX to EDG front-end
     -edg_parameter: XXX YYY pass  -XXX YYY to EDG front-end (note: space after colon is required)
    --edg_parameter: XXX YYY pass --XXX YYY to EDG front-end (note: space after colon is required)

Control Fortran frontend processing:
     -rose:cray_pointer_support
                             turn on internal support for cray pointers
                             (Note: not implemented in front-end (OFP) yet.)
     -fortran:XXX            pass -XXX to independent semantic analysis
                             (useful for turning on specific warnings in front-end)

Control debugging of experimental Ada processing:
     -rose:ada:debug_external_frontend
                             turn on debugging flag in external Ada frontend
     -rose:ada:without_predefined_units
                             excludes processing of Ada predefined units (for debugging)
     -rose:ada:without_implementation_defined_units
                             excludes processing of Ada implementation defined units (for debugging)
     -rose:ada:fail_hard_adb
                             fails immediately with an assertion error when support for an Ada language element
                             has not been implemented. This fails only in in .adb files. (for ACATS testing)
     -rose:ada:warn
                             enable warnings messages
     -rose:ada:info
                             enable info messages
     -rose:ada:trace
                             enable tracing messages

Control code generation:
     -rose:unparser:clobber_input_file
                               **CAUTION**RED*ALERT**CAUTION**
                               If you don't know what this option does, don't use it!
                               We are not responsible for any mental or physical damage
                               that you will incur with the use of this option :)

                               Note: This option breaks parallel builds, so make sure
                               that with this option you use ROSE, and run your build
                               system, sequentially.
                               **CAUTION**RED*ALERT**CAUTION**
     -rose:unparse_line_directives
                               unparse statements using #line directives with
                               reference to the original file and line number
                               to support view of original source in debuggers
                               and external tools
     -rose:unparse_function_calls_using_operator_syntax
                               unparse overloaded operators using operator syntax
                               relevant to C++ only (default is to reproduce use
                               defined by the input code).
     -rose:unparse_function_calls_using_operator_names
                               unparse overloaded operators using operator names 
                               (not operator syntax) relevant to C++ only (default
                               is to reproduce use defined by the input code).
     -rose:unparse_instruction_addresses
                               Outputs the addresses in left column (output
                               inappropriate as input to assembler)
     -rose:unparse_raw_memory_contents
                               Outputs memory contents in left column
     -rose:unparse_binary_file_format
                               Outputs binary executable file format information
     -rose:unparse_includes
                               unparse all include files into the source file.
                               This is a backup option for fail-safe processing
                               of CPP directives (which can be tricky)
     -rose:C_output_language
                             force use of C as output language (currently
                               generates C/C++)
     -rose:Cxx_output_language
                             force use of C++ as output language
     -rose:Fortran_output_language
                             force use of Fortran as output language
     -rose:Promela_output_language
                             force use of Promela as output language (not
                               supported)
     -rose:PHP_output_language
                             force use of PHP as output language
     -rose:outputFormat      generate code in either fixed/free format (fortran only)
                               options are: fixedOutput|fixedFormatOutput or 
                                            freeOutput|freeFormatOutput
     -rose:backendCompileFormat
                             use backend compiler option to compile generated code
                               in either fixed/free format (fortran only)
                               options are: fixedOutput|fixedFormatOutput or 
                                            freeOutput|freeFormatOutput
     -rose:unparseHeaderFilesRootFolder FOLDERNAME
                             A relative or an absolute path to the root folder,
                             in which unparsed header files are stored.
                             Note that the folder must be empty (or does not exist).
                             If not specified, the default relative location _rose_ 
                             is used.
     -rose:applicationRootDirectory DIRECTORYNAME
                             A relative or an absolute path to the root folder,
                             in which all application files will use for the unparsing 
                             of source files and header files. If not specified, the default 
                             location is the current directory. 
     -rose:unparse_in_same_directory_as_input_file
                             Build the generated source file (unparse) in the same directory as 
                             the input source file.  This allows the backend compiler 
                             to compile the generated file exactly the same as the 
                             input would have been compiled (following original header file 
                             source path lookup rules precisely (this is rarely required)). 
     -rose:suppressConstantFoldingPostProcessing
                             Optimization to avoid postprocessing phase in C code only
                             This option has only shown an effect on the 2.5 million line
                             wireshark application
                             (not presently compatable with OpenMP or C++ code)
     -rose:noclobber_output_file
                             force error on rewrite of existing output file (default: false).
     -rose:noclobber_if_different_output_file
                             force error on rewrite of existing output file only if result
                             if a different output file (default: false). 
     -rose:appendPID
                             append PID into the temporary output name. 
                             This can avoid issues in parallel compilation (default: false). 
     -rose:unparse_tokens
                             Unparses code using original token stream where possible.
                             Only C/C++ are supported now. Fortran support is under development 
     -rose:unparse_using_leading_and_trailing_token_mappings 
                             unparses code using original token stream and forces the output 
                             of two files representing the unparsing of each statement using 
                             the token stream mapping to the AST.  The token_leading_* file 
                             uses the mapping and the leading whitespace mapping between 
                             statements, where as the token_trailing_* file uses the mapping 
                             and the trailing whitespace mapping between statements.  Both 
                             files should be identical, and the same as the input file. 
     -rose:unparse_template_ast
                             unparse C++ templates from their AST, not from strings stored by EDG. 

Debugging options:
     -rose:detect_dangling_pointers LEVEL 
                             detects references to previously deleted IR nodes in the AST
                             (part of AST consistancy tests, default is false since some codes fail this test)
                             LEVEL is one of:
                               0: off (does not issue warning)
                               1: on (issues warning with information)
                               2: on (issues error and exists)

Testing Options:
     -rose:negative_test     test ROSE using input that is expected to fail
                               (returns 0 if input test failed, else error if
                               passed)
     -rose:test LEVEL        limit parts of ROSE which are run
                             LEVEL is one of:
                               0: transparent (ROSE translator does nothing)
                               1: run the KCC front end only (assumes it is in
                                    path)
                               2: run the newer version of EDG (compiled
                                    separately from SAGE) 'edgFrontEnd'
                                    (see
                                    src/frontend/EDG/EDG_3.3/src/Makefile.am
                                    for instructions on how to build EDG
                                    without SAGE III)
                               3: run internal (older) version of edg front end
                                    (deprecated option)
                               4: same as 3 plus parse into Sage III program
                                    tree
                               5: same as 4 plus unparse untransformed source
                                    code
                               6: same as 5 plus compile generated source code
                               7: same as 5 plus build higher level grammars
                                    before unparsing
                               8: same as 6 plus run midend (transformations)
                                    before unparsing

Report bugs to <dquinlan@llnl.gov>.
